{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surfc\\\\WaveFinderProject\\\\wave-finder-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { ChakraProvider, Box, Heading, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport LocationInput from './components/LocationInput';\nimport WavesTideInfo from './components/WavesTideInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [wavesTideData, setWavesTideData] = useState(null);\n  const [error, setError] = useState('');\n  const handleLocationSubmit = async (latitude, longitude) => {\n    try {\n      setError('');\n      const response = await axios.get(`http://localhost:5000/api/waves-tide-info?latitude=${latitude}&longitude=${longitude}`);\n      setWavesTideData(response.data);\n    } catch (error) {\n      setError('Error fetching waves and tide information.');\n      setWavesTideData(null);\n    }\n  };\n  const fetchWavesTideData = async location => {\n    // Replace 'YourAppName/1.0' with your app's name and version\n    const USER_AGENT = 'YourAppName/1.0';\n    const API_BASE_URL = 'https://api.weather.gov/';\n    const apiUrl = `${API_BASE_URL}points/${location}/forecast`;\n    const headers = {\n      'User-Agent': USER_AGENT,\n      'Content-Type': 'application/json'\n    };\n    return axios.get(apiUrl, {\n      headers\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"gray.100\",\n      minHeight: \"100vh\",\n      py: 8,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        maxW: \"md\",\n        mx: \"auto\",\n        p: 4,\n        bg: \"white\",\n        boxShadow: \"md\",\n        borderRadius: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"lg\",\n          textAlign: \"center\",\n          children: \"Waves & Tide App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LocationInput, {\n          onLocationSubmit: handleLocationSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"red.500\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), wavesTideData && /*#__PURE__*/_jsxDEV(WavesTideInfo, {\n          wavesTideData: wavesTideData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"R8J+Jwzhmc67/eH/w0c+sIW4xvE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChakraProvider","Box","Heading","Text","React","useState","axios","LocationInput","WavesTideInfo","jsxDEV","_jsxDEV","App","_s","wavesTideData","setWavesTideData","error","setError","handleLocationSubmit","latitude","longitude","response","get","data","fetchWavesTideData","location","USER_AGENT","API_BASE_URL","apiUrl","headers","children","bg","minHeight","py","maxW","mx","p","boxShadow","borderRadius","as","size","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onLocationSubmit","color","_c","$RefreshReg$"],"sources":["C:/Users/surfc/WaveFinderProject/wave-finder-app/src/App.tsx"],"sourcesContent":["import { ChakraProvider, Box, Heading, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport LocationInput from './components/LocationInput';\nimport WavesTideInfo from './components/WavesTideInfo';\n\nconst App: React.FC = () => {\n  const [wavesTideData, setWavesTideData] = useState<any | null>(null);\n  const [error, setError] = useState<string>('');\n\n  const handleLocationSubmit = async (latitude: number, longitude: number) => {\n    try {\n      setError('');\n      const response = await axios.get(`http://localhost:5000/api/waves-tide-info?latitude=${latitude}&longitude=${longitude}`);\n      setWavesTideData(response.data);\n    } catch (error) {\n      setError('Error fetching waves and tide information.');\n      setWavesTideData(null);\n    }\n  };\n  \n  const fetchWavesTideData = async (location: string) => {\n    // Replace 'YourAppName/1.0' with your app's name and version\n    const USER_AGENT = 'YourAppName/1.0';\n\n    const API_BASE_URL = 'https://api.weather.gov/';\n    const apiUrl = `${API_BASE_URL}points/${location}/forecast`;\n\n    const headers = {\n      'User-Agent': USER_AGENT,\n      'Content-Type': 'application/json',\n    };\n\n    return axios.get(apiUrl, { headers });\n  };\n\n  return (\n    <ChakraProvider>\n      <Box bg=\"gray.100\" minHeight=\"100vh\" py={8}>\n        <Box maxW=\"md\" mx=\"auto\" p={4} bg=\"white\" boxShadow=\"md\" borderRadius=\"lg\">\n          <Heading as=\"h1\" size=\"lg\" textAlign=\"center\">\n            Waves & Tide App\n          </Heading>\n          <LocationInput onLocationSubmit={handleLocationSubmit} />\n          {error && <Text color=\"red.500\">{error}</Text>}\n          {wavesTideData && <WavesTideInfo wavesTideData={wavesTideData} />}\n        </Box>\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}