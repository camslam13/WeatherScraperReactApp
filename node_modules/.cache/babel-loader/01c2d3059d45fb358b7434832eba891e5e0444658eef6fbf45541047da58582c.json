{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surfc\\\\WaveFinderProject\\\\wave-finder-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { ChakraProvider, Box, Heading, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport LocationInput from './components/LocationInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [windInfo, setWindInfo] = useState(null);\n  const [error, setError] = useState('');\n  const handleLocationSubmit = async (latitude, longitude) => {\n    try {\n      setError('');\n      const response = await axios.get(`http://localhost:5000/api/wind-info?latitude=${latitude}&longitude=${longitude}`);\n      setWindInfo(response.data);\n    } catch (error) {\n      setError('Error fetching wind information.');\n      setWindInfo(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"gray.100\",\n      minHeight: \"100vh\",\n      py: 8,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        maxW: \"md\",\n        mx: \"auto\",\n        p: 4,\n        bg: \"white\",\n        boxShadow: \"md\",\n        borderRadius: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"lg\",\n          textAlign: \"center\",\n          children: \"Wind Information App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LocationInput, {\n          onLocationSubmit: handleLocationSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"red.500\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), windInfo && /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: [\"Location: \", windInfo.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: [\"Wind Speed: \", windInfo.wind_speed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: [\"Wind Direction: \", windInfo.wind_direction]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6O7lnqjiX7imTkJwzTam9ofUTMs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChakraProvider","Box","Heading","Text","React","useState","axios","LocationInput","jsxDEV","_jsxDEV","App","_s","windInfo","setWindInfo","error","setError","handleLocationSubmit","latitude","longitude","response","get","data","children","bg","minHeight","py","maxW","mx","p","boxShadow","borderRadius","as","size","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onLocationSubmit","color","mt","location","wind_speed","wind_direction","_c","$RefreshReg$"],"sources":["C:/Users/surfc/WaveFinderProject/wave-finder-app/src/App.tsx"],"sourcesContent":["import { ChakraProvider, Box, Heading, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport LocationInput from './components/LocationInput';\n\nconst App: React.FC = () => {\n  const [windInfo, setWindInfo] = useState<any | null>(null);\n  const [error, setError] = useState<string>('');\n\n  const handleLocationSubmit = async (latitude: number, longitude: number) => {\n    try {\n      setError('');\n      const response = await axios.get(`http://localhost:5000/api/wind-info?latitude=${latitude}&longitude=${longitude}`);\n      setWindInfo(response.data);\n    } catch (error) {\n      setError('Error fetching wind information.');\n      setWindInfo(null);\n    }\n  };\n\n  return (\n    <ChakraProvider>\n      <Box bg=\"gray.100\" minHeight=\"100vh\" py={8}>\n        <Box maxW=\"md\" mx=\"auto\" p={4} bg=\"white\" boxShadow=\"md\" borderRadius=\"lg\">\n          <Heading as=\"h1\" size=\"lg\" textAlign=\"center\">\n            Wind Information App\n          </Heading>\n          <LocationInput onLocationSubmit={handleLocationSubmit} />\n          {error && <Text color=\"red.500\">{error}</Text>}\n          {windInfo && (\n            <Box mt={4}>\n              <Text>\n                Location: {windInfo.location}\n              </Text>\n              <Text>\n                Wind Speed: {windInfo.wind_speed}\n              </Text>\n              <Text>\n                Wind Direction: {windInfo.wind_direction}\n              </Text>\n              {/* Add other wind-related information as needed */}\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}